image: node:current

stages:
 - build
 - test
 - coverage
 - staging
 - test_staging
 - release

variables:
  yarn_config_cache: "$CI_PROJECT_DIR/.yarn"
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

.test_template: &test_definition
  stage: test
  script:
    # Install all dependencies
    - yarn install --frozen-lockfile
    # Run the unit tests
    - yarn test
    # Attempt to build
    - yarn build
  cache:
    key: 
      files:
        - yarn.lock
    paths:
      - .yarn
      - node_modules
  artifacts:
    paths:
      - coverage
  only:
    - merge_requests
    - branches
    - tags

test_node12:
  <<: *test_definition
  image: node:12

test_node14:
  <<: *test_definition
  image: node:14

test_node15:
  <<: *test_definition
  image: node:15

deploy_staging:
  stage: staging
  script:
    - npm install -g vercel@20
    - export STAGING_URL=$(vercel --build-env REACT_APP_MQTT_ENVIRONMENT=staging --token $VERCEL_TOKEN --confirm)
    - echo "Staging Deployment Live at $STAGING_URL"
    - echo "STAGING_URL=$STAGING_URL" >> build.env
  artifacts:
    reports:
      dotenv: build.env

e2e_test_staging:
  stage: test_staging
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - echo "Testing Staging Deployment $STAGING_URL"
    - docker login docker.pkg.github.com --username $GITHUB_CONTAINER_REGISTRY_USERNAME --password $GITHUB_CONTAINER_REGISTRY_TOKEN
    - |
      docker run --rm -v $(pwd)/e2e/tests/:/test \
        $RF_BROWSER_DOCKER_IMAGE \
        bash -c "robot --variable headless:true --variable hostname:$STAGING_URL --outputdir /test/output /test"
  variables:
    RF_BROWSER_DOCKER_IMAGE: docker.pkg.github.com/marketsquare/robotframework-browser/rfbrowser-stable:v2.1.0
  artifacts:
    paths:
      - e2e/tests/output/
    when: always
  needs:
    - job: deploy_staging
      artifacts: true

coverage:
  stage: coverage
  script:
    # Upload code coverage
    - bash <(curl -s https://codecov.io/bash) -t $CODECOV_TOKEN
  needs:
    - job: test_node15
      artifacts: true
  only:
    - branches
    - tags

build-docker-image:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    # Authenticate to the container registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Build test image
    - docker build --pull -t $CONTAINER_TEST_IMAGE .
    # Push the test image to the container registry
    - docker push $CONTAINER_TEST_IMAGE

release-docker-image:
  stage: release
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    # Authenticate to the container registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Pull the images we build earlier
    - docker pull $CONTAINER_TEST_IMAGE
    # Tag it as the release candidate
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    # Push it as the release candidate
    - docker push $CONTAINER_RELEASE_IMAGE
  needs:
    - job: build-docker-image
    - job: e2e_test_staging
    - job: test_node14
  only:
    - master
